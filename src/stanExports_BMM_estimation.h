// Generated by rstantools.  Do not edit by hand.

/*
    sleeve is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sleeve is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sleeve.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_BMM_estimation_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_BMM_estimation");
    reader.add_event(38, 36, "end", "model_BMM_estimation");
    return reader;
}
#include <stan_meta_header.hpp>
class model_BMM_estimation
  : public stan::model::model_base_crtp<model_BMM_estimation> {
private:
        int N;
        int nrt;
        std::vector<int> BCM;
        std::vector<double> PUS_BMM;
        std::vector<double> sigma;
        std::vector<double> BT;
public:
    model_BMM_estimation(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_BMM_estimation(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_BMM_estimation_namespace::model_BMM_estimation";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "nrt", "int", context__.to_vec());
            nrt = int(0);
            vals_i__ = context__.vals_i("nrt");
            pos__ = 0;
            nrt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nrt", nrt, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("BCM", "(N * nrt)", (N * nrt));
            context__.validate_dims("data initialization", "BCM", "int", context__.to_vec((N * nrt)));
            BCM = std::vector<int>((N * nrt), int(0));
            vals_i__ = context__.vals_i("BCM");
            pos__ = 0;
            size_t BCM_k_0_max__ = (N * nrt);
            for (size_t k_0__ = 0; k_0__ < BCM_k_0_max__; ++k_0__) {
                BCM[k_0__] = vals_i__[pos__++];
            }
            size_t BCM_i_0_max__ = (N * nrt);
            for (size_t i_0__ = 0; i_0__ < BCM_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "BCM[i_0__]", BCM[i_0__], 0);
                check_less_or_equal(function__, "BCM[i_0__]", BCM[i_0__], 1);
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("PUS_BMM", "N", N);
            context__.validate_dims("data initialization", "PUS_BMM", "double", context__.to_vec(N));
            PUS_BMM = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("PUS_BMM");
            pos__ = 0;
            size_t PUS_BMM_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < PUS_BMM_k_0_max__; ++k_0__) {
                PUS_BMM[k_0__] = vals_r__[pos__++];
            }
            size_t PUS_BMM_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < PUS_BMM_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "PUS_BMM[i_0__]", PUS_BMM[i_0__], 0);
                check_less_or_equal(function__, "PUS_BMM[i_0__]", PUS_BMM[i_0__], 1);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("sigma", "(N * nrt)", (N * nrt));
            context__.validate_dims("data initialization", "sigma", "double", context__.to_vec((N * nrt)));
            sigma = std::vector<double>((N * nrt), double(0));
            vals_r__ = context__.vals_r("sigma");
            pos__ = 0;
            size_t sigma_k_0_max__ = (N * nrt);
            for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
                sigma[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_i_0_max__ = (N * nrt);
            for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma[i_0__]", sigma[i_0__], 0);
                check_less_or_equal(function__, "sigma[i_0__]", sigma[i_0__], 1);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("BT", "nrt", nrt);
            context__.validate_dims("data initialization", "BT", "double", context__.to_vec(nrt));
            BT = std::vector<double>(nrt, double(0));
            vals_r__ = context__.vals_r("BT");
            pos__ = 0;
            size_t BT_k_0_max__ = nrt;
            for (size_t k_0__ = 0; k_0__ < BT_k_0_max__; ++k_0__) {
                BT[k_0__] = vals_r__[pos__++];
            }
            size_t BT_i_0_max__ = nrt;
            for (size_t i_0__ = 0; i_0__ < BT_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "BT[i_0__]", BT[i_0__], 0.1);
                check_less_or_equal(function__, "BT[i_0__]", BT[i_0__], 1);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("R_BMM", "(N * nrt)", (N * nrt));
            num_params_r__ += (1 * (N * nrt));
            current_statement_begin__ = 13;
            validate_non_negative_index("US_BMM", "N", N);
            num_params_r__ += (1 * N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_BMM_estimation() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 12;
        if (!(context__.contains_r("R_BMM")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R_BMM missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R_BMM");
        pos__ = 0U;
        validate_non_negative_index("R_BMM", "(N * nrt)", (N * nrt));
        context__.validate_dims("parameter initialization", "R_BMM", "double", context__.to_vec((N * nrt)));
        std::vector<double> R_BMM((N * nrt), double(0));
        size_t R_BMM_k_0_max__ = (N * nrt);
        for (size_t k_0__ = 0; k_0__ < R_BMM_k_0_max__; ++k_0__) {
            R_BMM[k_0__] = vals_r__[pos__++];
        }
        size_t R_BMM_i_0_max__ = (N * nrt);
        for (size_t i_0__ = 0; i_0__ < R_BMM_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, R_BMM[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R_BMM: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("US_BMM")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable US_BMM missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("US_BMM");
        pos__ = 0U;
        validate_non_negative_index("US_BMM", "N", N);
        context__.validate_dims("parameter initialization", "US_BMM", "double", context__.to_vec(N));
        std::vector<double> US_BMM(N, double(0));
        size_t US_BMM_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < US_BMM_k_0_max__; ++k_0__) {
            US_BMM[k_0__] = vals_r__[pos__++];
        }
        size_t US_BMM_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < US_BMM_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, US_BMM[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable US_BMM: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 12;
            std::vector<local_scalar_t__> R_BMM;
            size_t R_BMM_d_0_max__ = (N * nrt);
            R_BMM.reserve(R_BMM_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_BMM_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R_BMM.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    R_BMM.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 13;
            std::vector<local_scalar_t__> US_BMM;
            size_t US_BMM_d_0_max__ = N;
            US_BMM.reserve(US_BMM_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < US_BMM_d_0_max__; ++d_0__) {
                if (jacobian__)
                    US_BMM.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    US_BMM.push_back(in__.scalar_lub_constrain(0, 1));
            }
            // model body
            {
            current_statement_begin__ = 18;
            local_scalar_t__ lambda(DUMMY_VAR__);
            (void) lambda;  // dummy to suppress unused var warning
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            current_statement_begin__ = 19;
            int cntr(0);
            (void) cntr;  // dummy to suppress unused var warning
            stan::math::fill(cntr, std::numeric_limits<int>::min());
            current_statement_begin__ = 21;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 22;
                for (int r = 1; r <= nrt; ++r) {
                    current_statement_begin__ = 24;
                    stan::math::assign(cntr, (((r - 1) * N) + n));
                    current_statement_begin__ = 25;
                    lp_accum__.add(normal_log<propto__>(get_base1(US_BMM, n, "US_BMM", 1), get_base1(PUS_BMM, n, "PUS_BMM", 1), .0005));
                    current_statement_begin__ = 26;
                    lp_accum__.add(normal_log<propto__>(get_base1(R_BMM, cntr, "R_BMM", 1), get_base1(US_BMM, n, "US_BMM", 1), get_base1(sigma, cntr, "sigma", 1)));
                    if (get_base1(R_BMM, cntr, "R_BMM", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                    else if (get_base1(R_BMM, cntr, "R_BMM", 1) > 1) lp_accum__.add(-std::numeric_limits<double>::infinity());
                    else lp_accum__.add(-log_diff_exp(normal_cdf_log(1, get_base1(US_BMM, n, "US_BMM", 1), get_base1(sigma, cntr, "sigma", 1)), normal_cdf_log(0, get_base1(US_BMM, n, "US_BMM", 1), get_base1(sigma, cntr, "sigma", 1))));
                    current_statement_begin__ = 28;
                    if (as_bool(logical_gt(get_base1(R_BMM, cntr, "R_BMM", 1), get_base1(BT, r, "BT", 1)))) {
                        current_statement_begin__ = 29;
                        stan::math::assign(lambda, .9999);
                    } else {
                        current_statement_begin__ = 31;
                        stan::math::assign(lambda, .0001);
                    }
                    current_statement_begin__ = 33;
                    lp_accum__.add(bernoulli_log<propto__>(get_base1(BCM, cntr, "BCM", 1), lambda));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("R_BMM");
        names__.push_back("US_BMM");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((N * nrt));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_BMM_estimation_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> R_BMM;
        size_t R_BMM_d_0_max__ = (N * nrt);
        R_BMM.reserve(R_BMM_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_BMM_d_0_max__; ++d_0__) {
            R_BMM.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t R_BMM_k_0_max__ = (N * nrt);
        for (size_t k_0__ = 0; k_0__ < R_BMM_k_0_max__; ++k_0__) {
            vars__.push_back(R_BMM[k_0__]);
        }
        std::vector<double> US_BMM;
        size_t US_BMM_d_0_max__ = N;
        US_BMM.reserve(US_BMM_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < US_BMM_d_0_max__; ++d_0__) {
            US_BMM.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t US_BMM_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < US_BMM_k_0_max__; ++k_0__) {
            vars__.push_back(US_BMM[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_BMM_estimation";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_BMM_k_0_max__ = (N * nrt);
        for (size_t k_0__ = 0; k_0__ < R_BMM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_BMM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t US_BMM_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < US_BMM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "US_BMM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_BMM_k_0_max__ = (N * nrt);
        for (size_t k_0__ = 0; k_0__ < R_BMM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R_BMM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t US_BMM_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < US_BMM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "US_BMM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_BMM_estimation_namespace::model_BMM_estimation stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
